/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *@author Letsibogo Ramadi
 */


package windows;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class Manage_Modules extends javax.swing.JFrame {
    
    ArrayList<Object> rowDetails ;
    String moduleCode;
    byte nextstate;
    
    

    /**
     * Creates new form Manage_Users
     */
    public Manage_Modules() {

        initComponents();
        myInitComponents();
        populateTable();

    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        manageModulesPanel = new javax.swing.JPanel();
        searchBoxVar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editModuleButton = new javax.swing.JButton();
        addModuleButton = new javax.swing.JButton();
        archModButton = new javax.swing.JButton();
        mainMenuButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        openModuleButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MANAGE MODULES");
        setBounds(new java.awt.Rectangle(0, 0, 800, 800));
        setMaximumSize(new java.awt.Dimension(5000, 5000));
        setMinimumSize(new java.awt.Dimension(300, 300));
        setPreferredSize(new java.awt.Dimension(900, 600));

        manageModulesPanel.setOpaque(false);
        manageModulesPanel.setPreferredSize(new java.awt.Dimension(900, 600));

        searchBoxVar.setText("Search Module :");

        searchBox.setForeground(new java.awt.Color(153, 153, 153));
        searchBox.setText("Enter search term here....");
        searchBox.setToolTipText("enter search term and press ENTER");
        searchBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBoxFocusGained(evt);
            }
        });
        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBoxKeyPressed(evt);
            }
        });

        modTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Module Title", "Module Code", "Credits", "Courseworks", "Exams", "Module Leader", "Weighting"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        modTable.setCellSelectionEnabled(false);
        modTable.setRowSelectionAllowed (true);
        modTable.setRowSelectionAllowed(true);
        modTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        modTable.setAutoCreateRowSorter(true);
        modTable.setUpdateSelectionOnSort(true);
        jScrollPane1.setViewportView(modTable);
        modTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (modTable.getColumnModel().getColumnCount() > 0) {
            modTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            modTable.getColumnModel().getColumn(1).setPreferredWidth(30);
            modTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            modTable.getColumnModel().getColumn(3).setPreferredWidth(20);
            modTable.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        editModuleButton.setToolTipText("click to modify module details");
        editModuleButton.setText("Edit Module Details");
        editModuleButton.setPreferredSize(new java.awt.Dimension(180, 25));
        editModuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editModuleButtonActionPerformed(evt);
            }
        });

        addModuleButton.setToolTipText("click to add a new module");
        addModuleButton.setText("Add Module");
        addModuleButton.setPreferredSize(new java.awt.Dimension(180, 25));
        addModuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addModuleButtonActionPerformed(evt);
            }
        });

        archModButton.setText("Archive Module");
        archModButton.setToolTipText("click to remove module from database");
        archModButton.setName(""); // NOI18N
        archModButton.setPreferredSize(new java.awt.Dimension(180, 25));
        archModButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archModButtonActionPerformed(evt);
            }
        });

        mainMenuButton.setText("MAIN MENU");
        mainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("LOGOUT");
        logoutButton.setPreferredSize(new java.awt.Dimension(113, 25));
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        openModuleButton.setText("Open Module");
        openModuleButton.setToolTipText("click to view module in further detail");
        openModuleButton.setPreferredSize(new java.awt.Dimension(180, 25));
        openModuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openModuleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageModulesPanelLayout = new javax.swing.GroupLayout(manageModulesPanel);
        manageModulesPanel.setLayout(manageModulesPanelLayout);
        manageModulesPanelLayout.setHorizontalGroup(
            manageModulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageModulesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageModulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageModulesPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mainMenuButton))
                    .addGroup(manageModulesPanelLayout.createSequentialGroup()
                        .addComponent(searchBoxVar)
                        .addGap(18, 18, 18)
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(48, 48, 48)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(manageModulesPanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(addModuleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(editModuleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(archModButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageModulesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(openModuleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(326, 326, 326))
            .addComponent(jScrollPane1)
        );
        manageModulesPanelLayout.setVerticalGroup(
            manageModulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageModulesPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(manageModulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainMenuButton)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageModulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBox)
                    .addComponent(searchBoxVar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addGroup(manageModulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addModuleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(editModuleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(archModButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(openModuleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(manageModulesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(manageModulesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>                        

//MY BACK-END CODE
//#############################################################################
    public final void myInitComponents() {
        //set window to middle of computer screen
        setLocationRelativeTo(null);

        //make user table first component to gain focus during runtime
        modTable.requestFocusInWindow();
        
        //indicate to user that table is showing all results in database
        modTable.setToolTipText("SHOWING ALL ENTRIES IN DATABASE");

    }
    
    /**Fills the table with data from text file based database*/
    public final void populateTable() {
        
        File modules = new File("modules.txt");

        DefaultTableModel tm = (DefaultTableModel) modTable.getModel();
        //refreshes table when new data is added
        tm.getDataVector().removeAllElements();

        //read the file line by line into the table       
        try (BufferedReader br = new BufferedReader(new FileReader(modules))) {

            String line;//an entry in the database

            while ((line = br.readLine()) != null) {
                tm.addRow(line.split(",|;"));
            }
            br.close();

        } catch (FileNotFoundException e) {
            System.out.println("Error : could not open the file - " + modules);
        } catch (IOException e) {
            System.out.println("Error : problem encountered while reading file - " + modules);
        }
    }

    
    private void addModuleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        AddModule jdog = new AddModule();
        jdog.setVisible(true);
        jdog.setAlwaysOnTop(true);

        //update the table after adding user
        jdog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                
                searchBox.requestFocus();
                populateTable();
            }
        });

    }                                               

    //clear default text in search box when user clicks on it
    private void searchBoxFocusGained(java.awt.event.FocusEvent evt) {                                      
        searchBox.setText(null);
        searchBox.setForeground(Color.BLACK);
        //StaffTable.setRowSorter(null);
        modTable.setToolTipText("SHOWING ALL ENTRIES IN DATABASE");
    }                                     

    //execute search function when enter key is pressed
    private void searchBoxKeyPressed(java.awt.event.KeyEvent evt) {                                     
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            search();
        }

    }                                    

    private void archModButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        int row = modTable.getSelectedRow();

        if (row > -1) {
            try {
                ((DefaultTableModel) modTable.getModel()).removeRow(row);
                
                searchBox.requestFocus();
                deleteEntryFromDatabase();
            } catch (ArrayIndexOutOfBoundsException e) {
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select entry to archive", "No rows selected", JOptionPane.PLAIN_MESSAGE);
        }
    }                                             

    private void editModuleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        int row = modTable.getSelectedRow();
        
        if (row > -1) {
        ArrayList rowData = getRowDetails(row);
        ((DefaultTableModel) modTable.getModel()).removeRow(row);
        deleteEntryFromDatabase();
        EditModule jdog2 = new EditModule(rowData);        
        jdog2.setVisible(true);
        jdog2.setAlwaysOnTop(true);
        
        //update the table after adding user
        jdog2.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {               
                searchBox.requestFocus();
                populateTable();
                
            }
        });
        
        }else{
            JOptionPane.showMessageDialog(null, "Please select entry to edit", "No rows selected", JOptionPane.PLAIN_MESSAGE);
        }

        
    }                                                

    private void openModuleButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        //TODO  initialise vanessa code here,set visible etc...
        
        int row = modTable.getSelectedRow();
        if(row > -1){
            moduleCode = getModuleCode(row);
        }else{
            JOptionPane.showMessageDialog(null, "Please select module code to open", "No module selected", JOptionPane.PLAIN_MESSAGE);
        }
        
    }                                                

    private void mainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        nextstate = 1;
    }                                              

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        nextstate = -1;
    }                                            

    /**This search shrinks the table to display only the rows that
     *have a field matching the search term entered in the searchBox
     */
    public void search() {
        
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(modTable.getModel());
        modTable.setRowSorter(rowSorter);

        String searchTerm = searchBox.getText();
        modTable.setToolTipText("SHOWING ENTRIES CONTAINING USER ENTERED SEARCH TERM >>> " + "'" + searchTerm + "'");

        if (searchTerm.isEmpty()) {
            searchResultMessage(2);
             rowSorter.setRowFilter(null);
            return;
        }
        //display entries matching search term only
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchTerm));
                
        //reset display if no entries match search term
        if (modTable.getRowCount() == 0) {
            searchResultMessage(1);
            rowSorter.setRowFilter(null);
            modTable.setToolTipText("SHOWING ALL ENTRIES IN DATABASE");
        }
    }

    /**message to be displayed if search term does not match anything or is null
     * @param n select which message to display*/
    public void searchResultMessage(int n) {
        
        String noMatch = "Search term did not match any field in the table."
                + "\n         Please try a different search term";
        
        String emptySearch = "No search term entered. Please enter a valid search term";
        
        if (n == 1) {
            JOptionPane.showMessageDialog(null, noMatch, "No matching Results", JOptionPane.PLAIN_MESSAGE);
        }
        if (n == 2) {
            JOptionPane.showMessageDialog(null, emptySearch, "No matching Results", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    
    public void deleteEntryFromDatabase() {

        File modules = new File("modules.txt");
        File tempFile = new File("temp.txt");
        
        int rows = modTable.getRowCount();
        int columns = modTable.getColumnCount();

        try {
            FileWriter out = new FileWriter(tempFile);
            for (int i = 0; i < rows; i++) {
                String existingRow = "";
                for (int j = 0; j < columns; j++) {
                    existingRow += modTable.getValueAt(i, j).toString() + ",";
                }
                int last = existingRow.length() - 1;
                out.write(existingRow.substring(0, last));
                out.write("\n");
            }
            out.close();
            modules.delete();
            tempFile.renameTo(modules);

        } catch (FileNotFoundException e) {
            System.out.println("Error : could not open the file - " + modules);
        } catch (IOException e) {
            System.out.println("Error : problem encountered while reading file - " + modules);
        }
    }
    
    public String moduleCode(){
        return moduleCode;
    }
    
    public String getModuleCode(int row){        
        int modCodeColumn = 1;
        String modCode = (String)modTable.getValueAt(row, modCodeColumn);
        System.out.println(modCode);
        return modCode;
    }
    
    
    public ArrayList getRowDetails(int row){
        
        rowDetails = new ArrayList<>();        
        int columns = modTable.getColumnCount();
        
        for(int col = 0; col < columns; col++){  
            Object val = modTable.getValueAt(row, col);
            System.out.println(val);
            rowDetails.add(val);
        }  
        System.out.println("Row pos : "+row +" Row details :"+rowDetails.size());
        
        
        return rowDetails;
    }

//#############################################################################################################
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manage_Modules.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Manage_Modules().setVisible(true);
            }
        });
        
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton addModuleButton;
    private javax.swing.JButton archModButton;
    private javax.swing.JButton editModuleButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JPanel manageModulesPanel;
    public final javax.swing.JTable modTable = new javax.swing.JTable();
    private javax.swing.JButton openModuleButton;
    private final javax.swing.JTextField searchBox = new javax.swing.JTextField();
    private javax.swing.JLabel searchBoxVar;
    // End of variables declaration                   
}
